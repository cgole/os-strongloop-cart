{
  "name": "loopback-connector-rest",
  "version": "1.0.0",
  "description": "Loopback REST Connector",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "REST",
    "DataSource",
    "Connector"
  ],
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --timeout 30000 test/*test.js",
    "coverage": "mocha -r blanket -R html-cov > coverage_loopback-connector-rest.html"
  },
  "dependencies": {
    "loopback-datasource-juggler": "~1.0.0",
    "request": "~2.27.0",
    "qs": "0.6.5",
    "mime": "1.2.5",
    "methods": "0.0.1",
    "traverse": "~0.6.5",
    "JSONPath": "~0.9.1"
  },
  "devDependencies": {
    "loopback": "~1.0.0",
    "restler": "~2.0.1",
    "superagent": "~0.15.4",
    "swagger-client": "~2.0.6",
    "ql.io-engine": "~0.8.8",
    "express": "~3.4.0",
    "should": "~1.2.2",
    "mocha": "~1.12.1",
    "blanket": "~1.1.5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-connector-rest.git"
  },
  "license": "MIT",
  "readme": "# LoopBack REST Connector\n\nLoopBack REST connector allows Node.js application to interact with HTTP REST APIs using a template driven approach.\nIt supports two different styles of API invocations:\n\n## Resource CRUD\n\nIf the REST APIs supports CRUD operations for resources, such as users or orders, you can simply bind the model to\na REST endpoint that follows REST conventions.\n\nThe following methods are mixed into your model class:\n\n* create: POST /users\n* findById: GET /users/:id\n* delete: DELETE /users/:id\n* update: PUT /users/:id\n* find: GET /users?limit=5&username=ray&order=email\n\nBelow is a simple example:\n\n    var ds = loopback.createDataSource({\n        connector: require(\"loopback-connector-rest\"),\n        debug: false,\n        baseURL: 'http://localhost:3000'\n    });\n\n    var User = ds.createModel('user', {\n        name: String,\n        bio: String,\n        approved: Boolean,\n        joinedAt: Date,\n        age: Number\n    });\n\n    User.create(new User({name: 'Mary'}), function (err, user) {\n        console.log(user);\n    });\n\n    User.find(function (err, user) {\n        console.log(user);\n    });\n\n    User.findById(1, function (err, user) {\n        console.log(err, user);\n    });\n\n    User.update(new User({id: 1, name: 'Raymond'}), function (err, user) {\n        console.log(err, user);\n    });\n\n\n## Define a custom method using REST template\n\nImagine that you use browser or REST client to test drive a REST API, you will specify the following HTTP request properties:\n\n* method: HTTP method\n* url: The URL of the request\n* headers: HTTP headers\n* query: Query strings\n* responsePath: JSONPath applied to the HTTP body\n\nLoopBack REST connector allows you to define the API invocation as a json template. For example,\n\n        template: {\n                \"method\": \"GET\",\n                \"url\": \"http://maps.googleapis.com/maps/api/geocode/{format=json}\",\n                \"headers\": {\n                    \"accepts\": \"application/json\",\n                    \"content-type\": \"application/json\"\n                },\n                \"query\": {\n                    \"address\": \"{street},{city},{zipcode}\",\n                    \"sensor\": \"{sensor=false}\"\n                },\n                \"responsePath\": \"$.results[0].geometry.location\"\n            }\n\nThe template variable syntax is as follows:\n\n    {name=defaultValue:type}\n\nThe variable is required if the name has a prefix of ! or ^\n\nFor example:\n\n    '{x=100:number}'\n    '{x:number}'\n    '{x}'\n    '{x=100}ABC{y}123'\n    '{!x}'\n    '{x=100}ABC{^y}123'\n\nTo use custom methods, you can configure the REST connector with the `operations` property, which is an array of\nobjects that contain `template` and `functions`. The `template` property defines the API structure while the `functions`\nproperty defines JavaScript methods that takes the list of parameter names.\n\n    var loopback = require(\"loopback\");\n\n    var ds = loopback.createDataSource({\n        connector: require(\"loopback-connector-rest\"),\n        debug: false,\n        operations: [\n        {\n            template: {\n                \"method\": \"GET\",\n                \"url\": \"http://maps.googleapis.com/maps/api/geocode/{format=json}\",\n                \"headers\": {\n                    \"accepts\": \"application/json\",\n                    \"content-type\": \"application/json\"\n                },\n                \"query\": {\n                    \"address\": \"{street},{city},{zipcode}\",\n                    \"sensor\": \"{sensor=false}\"\n                },\n                \"responsePath\": \"$.results[0].geometry.location\"\n            },\n            functions: {\n               \"geocode\": [\"street\", \"city\", \"zipcode\"]\n            }\n        }\n    ]});\n\nNow you can invoke the geocode API as follows:\n\n    Model.geocode('107 S B St', 'San Mateo', '94401', processResponse);\n\nBy default, LoopBack REST connector also provides an 'invoke' method to call the REST API with an object of parameters,\nfor example:\n\n    Model.invoke({street: '107 S B St', city: 'San Mateo', zipcode: '94401'}, processResponse);\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-rest/issues"
  },
  "_id": "loopback-connector-rest@1.0.0",
  "dist": {
    "shasum": "c87b70c3971c85dd16aa023690776432a1a9ed14"
  },
  "_from": "loopback-connector-rest@~1.0.0",
  "_resolved": "https://registry.npmjs.org/loopback-connector-rest/-/loopback-connector-rest-1.0.0.tgz"
}
