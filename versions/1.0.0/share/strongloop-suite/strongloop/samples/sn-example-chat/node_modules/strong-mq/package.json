{
  "name": "strong-mq",
  "version": "0.0.6",
  "description": "clustering of applications on top of message queues",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "coverage": "./node_modules/.bin/mocha -r blanket -R html-cov > coverage_strong-mq.html",
    "test": "mocha --reporter spec",
    "lint": "./node_modules/.bin/jshint *.js test lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/strong-mq.git"
  },
  "author": {
    "name": "Sam Roberts",
    "email": "sam@strongloop.com"
  },
  "dependencies": {
    "amqp": "~0.1.6",
    "stomp-client": "~0.4.0",
    "underscore": "~1.4.4",
    "async": "~0.2.8"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "jshint": "~2.0.1",
    "marked": "~0.2.9",
    "blanket": "~1.1.4"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# strong-mq: clustering of applications on top of message queues\n\n[strong-mq](https://github.com/strongloop/sl-mq) is an abstraction layer\nover common message distribution patterns, and several different message queue\nimplementations, including cluster-native messaging.\n\nIt allows applications to be written against a single message queue style API, and then\ndeployed either singly, or as a cluster, with deploy-time configuration of the messaging\nprovider.  Providers include native node clustering, allowing no-dependency deployment\nduring test and development. Support for other providers is on-going, and 3rd parties will\nbe able to add pluggable support for new message queue platforms.\n\n\n## Message Patterns\n\n- work queue: published messages are delivered to a single subscriber, common when\n  distributing work items that should be processed by a single worker\n- topic: published messages are delivered to all subscribers, each message is associated\n  with a \"topic\", and subscribers can specify the topic patterns they want to receive\n- rpc: published messages are delivered to a single subscriber, and a associated response\n  is returned to the original publisher (TBD)\n\n\n## Installation\n\n    % npm install strong-mq\n    % npm test\n\n\n## Synopsis\n\nAn example of connecting to a server and listening on a work queue:\n\n```javascript\nvar connection = require('strong-mq')\n    .create('amqp://localhost')\n    .open();\n\nvar push = connection.createPushQueue('todo-items');\npush.publish({job: 'clean pool'});\n\nvar pull = connection.createPullQueue('todo-items');\npull.subscribe(function(msg) {\n    console.log('TODO:', msg);\n    connection.close();\n});\n```\n\n\n## Event: 'error'\n\nErrors may be emitted as events from either a connection or a queue.  The nature of the\nerrors emitted depends on the underlying provider.\n\n\n## Messages\n\nMessage objects can be either an `Object` or `Array`, transmitted as JSON, or a `String`\nor `Buffer`, transmitted as data.\n\n\n## Queues\n\nQueues are closed when they are empty and have no users. They might or might not\nbe persistent across restarts of the queue broker, depending on the provider.\n\n\n## Connections\n\n### slmq.create([options|url])\n\nReturns a connection object for a specific provider, configuration can\nbe created using a options object, or a url:\n\n* `options` {Object}\n* `url` {provider://...}\n\nIf `create()` is called with no arguments, the native provider will be used.\n\nSupported providers are:\n\n* `'amqp'`: RabbitMQ\n* `'native'`: Cluster-native messaging\n\nSupported options, other than `provider`, depend on the provider:\n\n* `provider` {String} Mandatory name of provider, such as `'amqp'`\n* `host` {String} Name of host to connect to (if supported by provider)\n* `port` {String} Port to connect to (if supported by provider)\n* `...` As supported by the provider\n\nExample of creating an amqp connection, using an options object:\n\n    connection = clustemq.create({\n        provider: 'amqp',\n        host: 'localhost',\n        user: 'guest',\n    });\n\nExample of declaring amqp, using a URL:\n\n    connection = clusermq.create('amqp://guest@localhost');\n\n\n### connection.provider {String}\n\nProperty is set to the name of the provider.\n\n\n### connection.open()\n\nOpens a connection.\n\nExample:\n\n    connection.open().on('error', function () {\n      // ... handle error\n    });\n\n\n### connection.close([callback])\n\nCallsback when connection has been closed.\n\n\n## Work queues (push/pull)\n\n### connection.createPushQueue()\n\nReturn a queue for publishing work items.\n\n### push.publish(msg)\n\nPublish a msg to a push queue.\n\n* `msg` {Object} Message to publish to the queue\n\n### connection.createPullQueue()\n\nReturn a queue for subscribing to work items.\n\n### pull.subscribe([listener])\n\nListen for messages on a work queue.\n\n`listener` is optional, it will be added as a listener\nfor the `'message'` event if provided.\n\n### queue.close()\n\nClose the queue.\n\n### queue.name {String}\n\nName used to create queue.\n\n### queue.type {String}\n\nEither 'push', or 'pull'.\n\n### Event: 'message'\n\nEvent is emitted when a subcribed pull queue receives a message.\n\n* `msg` {Object} Message pulled off the queue\n\n\n## Topic queue (pub/sub)\n\nTopics are dot-separated alphanumeric (or `'_'`) words. Subscription patterns match\nleading words.\n\n### connection.createPubQueue()\n\nReturn a queue for publishing on topics.\n\n### pub.publish(msg, topic)\n\n* `msg` {Object} Message to publish onto the queue\n* `topic` {String} Topic of message, default is `''`\n\n\n### connection.createSubQueue()\n\nReturn a queue for subscribing to topics.\n\n### sub.subscribe(pattern[, listener])\n\nListen for messages matching pattern on a topic queue.\n\n* `pattern` {String} Pattern of message, may contain wildcards, default is `''`\n\n`listener` is optional, it will be added as a listener for the `'message'` event if\nprovided. Add your listener to the `'message'` event directly when subscribing multiple\ntimes, or all your listeners will be called for all messages.\n\nExample of subscribing to multiple patterns:\n\n    sub.subscribe('that.*')\n      .subscribe('this.*')\n      .on('message', function (msg) { ... });\n\nExample of subscribing to a single pattern, and providing a listener:\n\n    sub.subscribe('other.*', function (msg) { ... });\n\n### queue.close()\n\nClose the queue.\n\n### queue.name {String}\n\nName used to create queue.\n\n### queue.type {String}\n\nEither 'pub', or 'sub'.\n\n### Event: 'message'\n\nEvent is emitted when a subcribed pull queue receives a message.\n\n* `msg` {Object} Message pulled off the queue\n\n\n## Provider: NATIVE\n\nThe NativeConnection uses the built-in\n[cluster](http://nodejs.org/docs/latest/api/cluster.html) module to facilitate the\nstrong-mq API.  It's designed to be the first adapter people use in early development,\nbefore they get whatever system they will use for deployment up and running.\n\nIt has no options.\n\nThe URL format is:\n\n    native:[//]\n\n### Multiple versions of strong-mq being initialized\n\nIf you get an assert during require of strong-mq about multiple versions being\ninitialized, then some of the modules you are depending on use strong-mq, but do\nnot specify it as a peerDependency. See\n[strongloop/strong-cluster-connect-store](https://github.com/strongloop/strong-cluster-connect-store/commit/dd00ed6978a676725c863e4ce0473bc8d2997d2f)\nas an example of how to correctly specify a dependency on strong-mq in a module.\nAn application can depend on strong-mq with a normal dependency.\n\n## Provider: AMQP\n\nSupport for RabbitMQ using the AMQP protocol. This provider is based\non the [node-amqp](https://npmjs.org/package/node-amqp) module, see\nits documentation for more information.\n\nThe options (except for `.provider`) or url is passed directly to node-amqp, supported\noptions are:\n\n* `host` {String} Hostname to connect to, defaults to `'localhost'`\n* `port` {String} Port to connect to, defaults to `5672`\n* `login` {String} Username to authenticate as, defaults to `'guest'`\n* `password` {String} Password to authenticate as, defaults to `'guest'`\n* `vhost` {String} Vhost, defaults to `'/'`\n\nThe URL format for specifying the options above is:\n\n    amqp://[login][:password][@]host[:port][/vhost]\n\nNote that the `host` is mandatory when using a URL.\n\nNote that node-amqp supports RabbitMQ 3.0.4, or higher. In particular, it will *not* work\nwith RabbitMQ 1.8.1 that is packaged with Debian 6, see the\n[upgrade instructions](http://www.rabbitmq.com/install-debian.html).\n\n\n## Provider: STOMP\n\nSupport for ActiveMQ using the STOMP protocol. This provider is based on the\n[node-stomp-client](https://github.com/easternbloc/node-stomp-client) module.\n\nThe options are:\n\n* `host` {String} Hostname to connect to, defaults to `'127.0.0.1'`\n* `port` {String} Port to connect to, defaults to `61613`\n* `login` {String} Username to authenticate as, defaults to none\n* `password` {String} Password to authenticate as, defaults to none\n\nThe URL format for specifying the options above is:\n\n    stomp://[login][:password][@]host[:port]\n\nNote that the `host` is mandatory when using a URL.\n\nActiveMQ ships with an example configuration sufficient to run the strong-mq unit\ntests.\n\nNote that node-stomp-client has been tested only with Active MQ 5.8.0. It can\nbe installed from\n[apache](http://activemq.apache.org/activemq-580-release.html),\nand run as:\n\n    activemq console xbean:activemq-stomp.xml\n\n\n## Future work\n\nFuture work may include support for the following, as needed, and if\ncommon mechanisms exist among the various queue providers.\n\n- Acknowledgement of msg processing, particularly for work queues, so\n  \"exactly once\" message handling can be guaranteed. The current API\n  is strictly \"one or less\", if a consumer fails to process a message\n  that has been delivered to it, it will never be processed.\n- Flow control, so consumers aren't overwhelmed by msgs, and can\n  provide back pressure on the queue when under load.\n- Persistence, whether queues persist beyond the existence of any\n  users or undelivered messages.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/strong-mq/issues"
  },
  "_id": "strong-mq@0.0.6",
  "dist": {
    "shasum": "0dae1ff34e8b3b2a9e238645143bddeef7c9d4ca"
  },
  "_from": "strong-mq@~0.0.4",
  "_resolved": "https://registry.npmjs.org/strong-mq/-/strong-mq-0.0.6.tgz"
}
