{
  "name": "is2",
  "version": "0.0.4",
  "description": "A type checking library where each exported function returns either true or false and does not throw. Also added tests.",
  "tags": [
    "utilities",
    "JavaScript",
    "node.js",
    "validation",
    "type",
    "checking"
  ],
  "author": {
    "name": "Enrico Marino",
    "email": "enrico.marino@email.com"
  },
  "maintainers": "Edmond Meinfelder <edmond@stdarg.com>",
  "homepage": "http://github.com/stdarg/is2",
  "repository": {
    "type": "git",
    "url": "git@github.com:stdarg/is2.git"
  },
  "bugs": {
    "url": "http://github.com/stdarg/is/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/is2.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter list"
  },
  "engines": {
    "node": ">=v0.6.0"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.8.1",
    "jsdom": "0.5.0"
  },
  "readme": "is2\n===\nis2 is a type-checking module for node.js to test values. Is does not throw exceptions and every function only returns true or false. Use is2 to validate types in your node.js code. Every function in is2 returns either true of false.\n\nAfter finding Enrico Marino's module is, the concise syntax amazed, but there were syntax issues that made using is difficult. This fork of is fixes those issues, but the module is no longer cross-platform. Also, added tests via mocha which can be run using 'npm test'.\n\n## Installation\nTo install is2, type:\n\n    $ npm install is2\n\n## Usage\n\n    var is = require('is2');\n\n    console.log('true is equal to 1===1: '+(is.equal(true, 1===1));\n    console.log('10 is a positive number: '+(is.positiveNumber(10));\n    console.log('11 is an odd number: '+(is.oddNumber(11));\n\n## API\n\n### is.type(value, type)\n\nTest if 'value' is a type of 'type'.\nAlias: a\n\n#### Params:\n\n* **value** *value* to test.\n\n* **String** *type* THe name of the type.\n\n#### Return:\n\n* **Boolean** true if 'value' is an arguments object, false otherwise.\n\n### is.defined(value)\n\nTest if 'value' is defined.\nAlias: def\n\n#### Params:\n\n* **Any** *value* The value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is defined, false otherwise.\n\n### is.nullOrUndef(value)\n\nTest is 'value' is either null or undefined.\nAlias: nullOrUndef\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** True if value is null or undefined, false otherwise.\n\n### is.empty(value)\n\nTest if 'value' is empty. To be empty means to be an array, object or string with nothing contained.\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is empty, false otherwise.\n\n### is.objEquals(value, other)\n\nDo a deep comparision of two objects for equality. Will recurse without any limits. Meant to be\ncalled by equal only.\n\n#### Params:\n\n* **Object** *value* The first object to compare.\n\n* **Object** *other* The second object to compare.\n\n#### Return:\n\n* **Boolean** true, if the objects are equivalent, false otherwise.\n\n### is.equal(value, other)\n\nTest if 'value' is equal to 'other'. Works for objects and arrays and will do deep comparisions,\nusing recursion.\nAlias: eq\n\n#### Params:\n\n* **Any** *value* value.\n\n* **Any** *other* value to compare with.\n\n#### Return:\n\n* **Boolean** true if 'value' is equal to 'other', false otherwise\n\n### is.NON_HOST_TYPES\n\nJS Type definitions which cannot host values.\n\n### is.hosted(value, host)\n\nTest if 'key' in host is an object. To be hosted means host[value] is an object.\n\n#### Params:\n\n* **Any** *value* The value to test.\n\n* **Any** *host* Host that may contain value.\n\n#### Return:\n\n* **Boolean** true if 'value' is hosted by 'host', false otherwise.\n\n### is.instanceOf(value)\n\nTest if 'value' is an instance of 'constructor'.\nAliases: instOf, instanceof\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an instance of 'constructor'.\n\n### is.null(value)\n\nTest if 'value' is null.\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is null, false otherwise.\n\n### is.undefined(value)\n\nTest if 'value' is undefined.\nAliases: undef, udef\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is undefined, false otherwise.\n\n### is.arguments(value)\n\nTest if 'value' is an arguments object.\nAlias: args\n\n#### Params:\n\n* **Any** *value* value to test\n\n#### Return:\n\n* **Boolean** true if 'value' is an arguments object, false otherwise\n\n### is.emptyArguments(value)\n\nTest if 'value' is an arguments object that is empty.\nAlias: args\n\n#### Params:\n\n* **Any** *value* value to test\n\n#### Return:\n\n* **Boolean** true if 'value' is an arguments object with no args, false otherwise\n\n### is.array(value)\n\nTest if 'value' is an array.\nAlias: ary, arry\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an array, false otherwise.\n\n### is.nonEmptyArray(value)\n\nTest if 'value' is an array containing at least 1 entry.\nAliases: nonEmptyArry, nonEmptyAry\n\n#### Params:\n\n* **Any** *value* The value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an array with at least 1 value, false otherwise.\n\n### is.nonEmptyArray(value)\n\nTest if 'value' is an array containing no entries.\nAliases: emptyArry, emptyAry\n\n#### Params:\n\n* **Any** *value* The value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an array with no elemnets.\n\n### is.empty(value)\n\nTest if 'value' is an empty array(like) object.\nAliases: arguents.empty, args.empty, ary.empty, arry.empty\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an empty array(like), false otherwise.\n\n### is.arrayLike(value)\n\nTest if 'value' is an arraylike object (i.e. it has a length property with a valid value)\nAliases: arraylike, arryLike, aryLike\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an arguments object, false otherwise.\n\n### is.boolean(value)\n\nTest if 'value' is a boolean.\nAlias: bool\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a boolean, false otherwise.\n\n### is.false(value)\n\nTest if 'value' is false.\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is false, false otherwise\n\n### is.true(value)\n\nTest if 'value' is true.\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is true, false otherwise.\n\n### is.date(value)\n\nTest if 'value' is a date.\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a date, false otherwise.\n\n### is.error(value)\n\nTest if 'value' is an error object.\nAlias: err\n\n#### Params:\n\n* **value** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an error object, false otherwise.\n\n### is.function(value)\n\nTest if 'value' is a function.\nAlias: func\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a function, false otherwise.\n\n### is.number(value)\n\nTest if 'value' is a number.\nAlias: num\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### is.positiveNumber(value)\n\nTest if 'value' is a positive number.\nAlias: positiveNum, posNum\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### is.negativeNumber(value)\n\nTest if 'value' is a negative number.\nAliases: negNum, negativeNum\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### is.decimal(value)\n\nTest if 'value' is a decimal number.\nAliases: decimalNumber, decNum\n\n#### Params:\n\n* **Any** *value* value to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a decimal number, false otherwise.\n\n### is.divisibleBy(value, n)\n\nTest if 'value' is divisible by 'n'.\nAlias: divisBy\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Number** *n* dividend.\n\n#### Return:\n\n* **Boolean** true if 'value' is divisible by 'n', false otherwise.\n\n### is.int(value)\n\nTest if 'value' is an integer.\nAlias: integer\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an integer, false otherwise.\n\n### is.positiveInt(value)\n\nTest if 'value' is a positive integer.\nAlias: posInt\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a positive integer, false otherwise.\n\n### is.negativeInt(value)\n\nTest if 'value' is a negative integer.\nAliases: negInt, negativeInteger\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a negative integer, false otherwise.\n\n### is.maximum(value, others)\n\nTest if 'value' is greater than 'others' values.\nAlias: max\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Array** *others* values to compare with.\n\n#### Return:\n\n* **Boolean** true if 'value' is greater than 'others' values.\n\n### is.minimum(value, others)\n\nTest if 'value' is less than 'others' values.\nAlias: min\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Array** *others* values to compare with.\n\n#### Return:\n\n* **Boolean** true if 'value' is less than 'others' values.\n\n### is.even(value)\n\nTest if 'value' is an even number.\n\n#### Params:\n\n* **Number** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an even number, false otherwise.\n\n### is.odd(value)\n\nTest if 'value' is an odd number.\n\n#### Params:\n\n* **Number** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an odd number, false otherwise.\n\n### is.ge(value, other)\n\nTest if 'value' is greater than or equal to 'other'.\nAliases: greaterOrEq, greaterOrEqual\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Number** *other* value to compare with.\n\n#### Return:\n\n* **Boolean** true, if value is greater than or equal to other, false otherwise.\n\n### is.gt(value, other)\n\nTest if 'value' is greater than 'other'.\nAliases: greaterThan\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Number** *other* value to compare with.\n\n#### Return:\n\n* **Boolean** true, if value is greater than other, false otherwise.\n\n### is.le(value, other)\n\nTest if 'value' is less than or equal to 'other'.\nAlias: lessThanOrEq, lessThanOrEqual\n\n#### Params:\n\n* **Number** *value* value to test\n\n* **Number** *other* value to compare with\n\n#### Return:\n\n* **Boolean** true, if 'value' is less than or equal to 'other', false otherwise.\n\n### is.lt(value, other)\n\nTest if 'value' is less than 'other'.\nAlias: lessThan\n\n#### Params:\n\n* **Number** *value* value to test\n\n* **Number** *other* value to compare with\n\n#### Return:\n\n* **Boolean** true, if 'value' is less than 'other', false otherwise.\n\n### is.within(value, start, finish)\n\nTest if 'value' is within 'start' and 'finish'.\nAlias: withIn\n\n#### Params:\n\n* **Number** *value* value to test.\n\n* **Number** *start* lower bound.\n\n* **Number** *finish* upper bound.\n\n#### Return:\n\n* **Boolean** true if 'value' is is within 'start' and 'finish', false otherwise.\n\n### is.object(value)\n\nTest if 'value' is an object. Note: Arrays, RegExps, Date, Error, etc all return false.\nAlias: obj\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### is.nonEmptyObject(value)\n\nTest if 'value' is an object with properties. Note: Arrays are objects.\nAlias: nonEmptyObj\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### is.objectInstanceof(objInst, objType)\n\nTest if 'value' is an instance type objType.\nAliases: objInstOf, objectinstanceof, instOf, instanceOf\n\n#### Params:\n\n* **object** *objInst* an object to testfor type.\n\n* **object** *objType* an object type to compare.\n\n#### Return:\n\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### is.regexp(value)\n\nTest if 'value' is a regular expression.\nAlias: regexp\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a regexp, false otherwise.\n\n### is.string(value)\n\nTest if 'value' is a string.\nAlias: str\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a string, false otherwise.\n\n### is.emptyString(value)\n\nTest if 'value' is an empty string.\nAlias: emptyStr\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is am empty string, false otherwise.\n\n### is.nonEmptyString(value)\n\nTest if 'value' is a non-empty string.\nAlias: nonEmptyStr\n\n#### Params:\n\n* **Any** *value* to test.\n\n#### Return:\n\n* **Boolean** true if 'value' is a non-empty string, false otherwise.\n",
  "readmeFilename": "README.md",
  "_id": "is2@0.0.4",
  "dist": {
    "shasum": "df10e78b66d049fb58d1e85b9ac7969c0083f0d0"
  },
  "_from": "is2@~0.0.3",
  "_resolved": "https://registry.npmjs.org/is2/-/is2-0.0.4.tgz"
}
