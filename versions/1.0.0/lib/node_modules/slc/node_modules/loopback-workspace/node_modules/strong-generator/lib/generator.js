/*!
 * TODO: Description.
 */
var fs = require('fs');
var path = require('path');
var async = require('async');
var debug = require('debug')('loopback:Renderer');
var dust = require('dustjs-linkedin');
var findit = require('findit');
var mkdirp = require('mkdirp');

// By default, dust wipes out any ancillary formatting. By replacing ths format
// function, we can repeal that policy.
// TODO(schoon) - Make this configurable per-Generator.
dust.optimizers.format = function(ctx, node) { return node; };

/**
 * Creates a new instance of Generator with the provided `options`.
 *
 * @param {Object} options
 */
function Generator(options) {
  if (!(this instanceof Generator)) {
    return new Generator(options);
  }

  options = options || {};
}
Generator.createGenerator = Generator;

/**
 * Fills Dust-style `template` with `data`, calling Node-style `callback` with either an Error or the fulfilled results.
 *
 * @param  {String}   template The template to fill.
 * @param  {Object}   data     The data to fill with.
 * @param  {Function} callback A Node-style callback function.
 * @return {Generator}         The generator instance, for chaining.
 */
Generator.prototype.render = render;
function render(template, data, callback) {
  var self = this;

  dust.renderSource(template, data, callback);

  return self;
}

/**
 * Duplicates all files and folders in `from` at `to`, rendering all files along the way as templates. The `to`
 * directory need not exist, and will be created otherwise.
 *
 * @param  {String}   from     The full path to a directory containing source files and templates.
 * @param  {String}   to       The full path to a directory to write to.
 * @param  {Object}   options  The data to fill tempates with.
 * @param  {Function} callback An error-only callback.
 * @return {Generator}         The generator instance, for chaining.
 */
Generator.prototype.renderAll = renderAll;
function renderAll(from, to, options, callback) {
  var self = this;
  var operations = [];

  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  debug('Creating files in %s...', root);

  addDirectory(to);
  findit
    .find(from, { follow_symlinks: true })
    .on('directory', function (dir) {
      addDirectory(path.resolve(to, path.relative(from, dir)));
    })
    .on('file', function (file) {
      addFile(file, path.resolve(to, path.relative(from, file)));
    })
    .on('end', function () {
      async.series(operations, callback);
    });

  function addDirectory(dir) {
    debug('New directory: %s', dir);
    operations.push(function (cbMkdir) {
      mkdirp(dir, cbMkdir);
    });
  }

  function addFile(from, to) {
    debug('New file: %s', to);
    operations.push(function (cbGenerate) {
      async.waterfall([
        fs.readFile.bind(fs, from, 'utf8'),
        function (template, cbRender) {
          self.render(template, options, cbRender);
        },
        fs.writeFile.bind(fs, to)
      ], cbGenerate);
    });
  }

  return self;
}

/*!
 * Export `Generator`.
 */
module.exports = Generator;
