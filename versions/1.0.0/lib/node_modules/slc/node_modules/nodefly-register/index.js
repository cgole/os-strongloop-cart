var request = require('request');

/**
 * Helper to generate request object
 * 
 * @param  {String} url  [URL fragment]
 * @param  {Object} data [JSON input data]
 * @return {Object}      [Request object]
 */

function input (url, data) {
	var baseUrl = data.baseUrl || 'https://nodefly.com/ops/rest/';
	delete data.baseUrl;
	return { url: baseUrl + url, json: data };
}

/**
 * All responses are handled the same
 * 
 * @param  {Function} callback [Callback to receive resulting error or json]
 * @return {Function}          [Handler function to receive response]
 */

function handle (callback) {
	return function (err, res) {
		if (err) return callback(err);
		if (res.statusCode !== 200) {
			var errMessage = res.body.message || res.body
			return callback(new Error(errMessage), res);
		}
		callback(null, res.body);
	};
}

/**
 * Register user with NodeFly and retrieve API key
 * 
 * @param {object}   [data]     [Contains; name, email, password]
 * @param {function} [callback] [Callback to receive registered user json]
 */

function register (data, callback) {
	request.post(input('register', data), handle(callback));
}

/**
 * Register user with NodeFly and retrieve API key
 * 
 * @param {object}   [data]     [Contains; email, password]
 * @param {function} [callback] [Callback to receive logged in user json]
 */

function login (data, callback) {
	request.post(input('login', data), handle(callback));
}

/**
 * Cancel an account on NodeFly, deleting the user
 * NOTE: This only works with test@strongloop.com at the moment
 * 
 * @param {object}   [data]     [Contains; email, password]
 * @param {function} [callback] [Callback to receive possible error]
 */

function cancel (data, callback) {
	request.post(input('cancel', data), handle(callback));
}

// Register is available as base export or exports.register
module.exports = register;
register.register = register;
register.login = login;
register.cancel = cancel;
